# Travis CI build configuration config file.
# Used environment variables (see: http://docs.travis-ci.com/user/ci-environment/):
#   TRAVIS_BUILD_DIR - The absolute path to the directory where the repository being built has been copied on the worker. (e.g. "/home/travis/build/EA31337/EA31337-Sets")
#   TRAVIS_REPO_SLUG - The slug (in form: owner_name/repo_name) of the repository currently being built. (e.g. "EA31337/EA31337-Sets")

language: python
python: '3.4'

sudo: required  # Required for Precise/Wine 1.7

addons:
  hosts:
    - travis.local

# Environment
env:
  global:
    - CWD="$TRAVIS_BUILD_DIR"
    - GIT_TRACE=0
    - DISPLAY=:0.0 DISPLAY_BACKUP=$DISPLAY WINEDLLOVERRIDES="mscoree,mshtml=" WINEDEBUG="fixme+all"
    - UPSTREAM_USER='d-a-t-a-d-i-t'
    - USER=${TRAVIS_REPO_SLUG%%/*}
    - REPOSITORY=${TRAVIS_REPO_SLUG##*/}
    - PATH=${PATH//:\.\/node_modules\/\.bin/} # Fixes Travis bug: https://github.com/travis-ci/travis-ci/issues/4862
    - secure: "crXsd5puGxZaDE9EVTDLU0tMeH3JRmIAUwLhBjheBPzbzT/buE1owFsaeGsr/XQStNrt2EWq8LxN/c4TOkHJ9tTU8f6+3IUkAXvzqYwwcE+HbY3KJ4jJd2KHRQ5NbwpAkDtADvcrw5CDdWGmMiOEaA54l4GCBg0Id5jWOy2KbKXBnjWeaZu6irYT1B6HMAYSxPKWVHriku323tgH3FgAn1HtKK2nhOPjulBj6vj/ioS7xy20sz9j2yN7hExGB1k0GGUSNi7O74xYqLHhBJISp7LplHbaTJCMi5/xd9h9kSfsTLxJtXTqxat/92JburhzFvGBEjd4gJOiZxJw0vymTVJaqwpfy7joD3QD6jz/nF7w5HSnTvEly6wLCOH00TbrfPvwPvFvfXTFl6diNZEfZCwiSJa9eM88hDkpPyp8+O2w9TprASI66qmsM2z3vt2UM4L5k5QfYrIVPE9J4LE1btjX4cecQVb1oauE5N9Hr77e92R5lfA7LgAcT5TluG5AMNJSEbDmdYrnz9W+nlm+2ML3OhdfWHvcvMFSI0Cjpn+9ZF88pGFBc0qjiQQPJCq7WwBgC3pMYsuioV92BNevCDtzCEPL4hp/oc69K+tKxzb4/OdFWSJO5zEKOno1FCheFHLTNl7qbDUt/5xz08hSwtWf7aR5da1CT7eG4RVJCoY="
    - secure: "eMGIXPSYLk1LIxqocS3CuHl+vxUSr1ZDs38yNdA6jwc/7zeWn7zA0+N2zHKr9UzkHDYJ9cbLDlJZk/M8umtDr3H3orld3TCSXMgtyKqCdDV3T4rwmcJs3InyrOa7Ia72FNJttjpToQ53oWnMqCk/eN7sLL4ZJLmJxAlkW5JK5fml0UYn03jrE3ggXmjjm/CpjrkurgfioDL7xhxtnACHCNuWRupXxI4486rzAW6enqrluVcr25a0Zn7ZAAseIxqQhEuUqiyJlKRcrlaO3yDYIa1AI0drLYMlmOcEAxcSzVIwTX79CV4C7UQWg2SHYOXYK+ak+AXwKvr8Q4y5u4PZBvBZTOELHRW61MvDq5NjAvvEgc5VvHtsWG7b0Qqe0N3EU4cJBqLfeOettFd4rA+VBRgUVoUXaXgQlKibKBG4kBEM030mIfLzTMAAYduYNiallzffGhn4ZRzTQPOAM298sh5moIo5yIl+1z2bxEXXz0BOs273JZNhBBXzS1CSQoeHZEVvETnnWAUvnNPrZ6moQ6/gkabhyV1jUNiplxGoJ9bSShPzwh1rfgskAyHBrvGiNLnRzU5bx0YJRqT7njqRhPCXfVEa7Q5qWtrXwWF/DNDd9gbeocedsHAsmzlLgfeJsJiVX+9jM7w0/NlHowjhPnBZJYq2dLSzzku6/5Vv/WA="
  matrix:
    - PLATFORM=MT4 MODE=Lite

# Before Install
# Use this to prepare the system to install prerequisites or dependencies.
# Commonly used to update git repository submodules and do similar tasks that need to be performed before dependencies are installed.
before_install:
  - echo "UPSTREAM_USER=$UPSTREAM_USER"
  - echo "USER=$USER"
  - echo "REPOSITORY=$REPOSITORY"
  - echo "TRAVIS_BRANCH=$TRAVIS_BRANCH"
  - |
    # Send pull-request to upstream repository if Travis is running in a forked repository
    if [ "$USER" != "$UPSTREAM_USER" ]; then
      # Check if the forker's GitHub access token was passed to Travis
      if [ -z "$OAUTH_TOKEN" ]; then
        echo "Please set the OAUTH_TOKEN environment variable in Travis CI with a valid access token which has the 'public_repo' scope."
        exit 1
      fi

      # Send pull-request to upstream (main) repository for doing the backtests
      # TODO [NO CI]
      CURL_STATUS=$(curl -siH "Authorization: token $OAUTH_TOKEN" -d '{"title": "'"$(date --rfc-3339=seconds)"'", "base": "'$TRAVIS_BRANCH'", "head": "'$USER':'$TRAVIS_BRANCH'"}' https://api.github.com/repos/$UPSTREAM_USER/$REPOSITORY/pulls | head -n1 | cut -d' ' -f2) #'
      echo "CURL_STATUS=$CURL_STATUS"
      if [ "$CURL_STATUS" != "201" ]; then
        exit 1  # TODO Provide some useful message...
      fi
      exit 0
    else
      if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
      echo "[ERROR] We're in the upstream repo, but running on the virtual branch of the pull request which shouldn't have been happened!"
        exit 1
      fi
    fi

  - echo '[OK] Building on upstream:master.'

  # || WTF2
  # ||
  # \/
  - env

  # Add PPA/Wine repository
  - sudo add-apt-repository -y ppa:ubuntu-wine/ppa

  # Skip unnecessary source indexes for a faster run
  - sudo sed -i'' 's/^deb-src/#deb-src/' /etc/apt/sources.list /etc/apt/sources.list.d/ubuntu-wine-ppa-precise.list

  # Update apt repositories.
  - sudo apt-get update


# Install
# Use this to install any prerequisites or dependencies necessary to run your build.
install:
  - sudo -E apt-get --no-install-suggests --no-install-recommends --force-yes install xvfb xdotool winbind wine1.7 realpath tree
  - sudo ln -s $CWD/_VM /vagrant  # Workaround for FX-MT-VM/scripts/run_backtest.sh:3
  - sudo rm -rf /opt              # Workaround for FX-MT-VM/scripts/run_backtest.sh:4
  - sudo ln -s ~ /opt             # Workaround for FX-MT-VM/scripts/run_backtest.sh:4
  - sudo install -v $CWD/_VM/scripts/run_backtest.sh /usr/local/bin


# Before Script
# Use this to prepare your build for testing (e.g. copy database configurations, environment variables, etc.).
before_script:
  - Xvfb $DISPLAY -screen 0 1024x768x16 &> ~/Xvfb.log &


# Script
# Main build command to run.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  - $CWD/_VM/scripts/install_mt4.sh
  - |
    # Clone EAs if Travis runs on home repository
    if [ "$TRAVIS_REPO_SLUG" = "EA31337/EA31337-Sets" ] && [ -n "$PS" ] && [ -n "$EA" ]; then
      # Perform authentication tasks.
      ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      git config --local include.path "$CWD/.gitconfig"
      install -vm700 <(echo "echo $PS") $CWD/ps && test $PS = $($CWD/ps)
      eval "$(ssh-agent -s)"
      git config --get key.travis | tr '|' '\n' | rev | base64 -d | gunzip -c | DISPLAY= SSH_ASKPASS=$CWD/ps ssh-add -
      git clone -q $EA ~/ea
      DISPLAY=$DISPLAY_BACKUP
      cp -v ~/ea/*.ex4 /vagrant
    # Otherwise link an available sample EA
    else
      echo 'Using *SAMPLE* expert!'
      EA_SAMPLE=$(find ~/.wine/drive_c -path '*Experts*' -type f -name MACD*.ex4 -print0 -quit)
      ln -s "$EA_SAMPLE" "/vagrant/$MODE.ex4"
    fi
  - $CWD/_VM/scripts/dl_bt_data.sh
  - $CWD/_scripts/run_backtests.sh "$MODE"
  - DATE=$(date +%Y%m%d)
  - git checkout -b "EA-$DATE"
  - git add -A "$MODE"
  - git config user.name $USER
  - git config user.email $USER'@users.noreply.github.com'
  - git commit -am 'New report.' # TODO [NO CI] message
  - |
    # Check if the GitHub access token of main repository was passed to Travis
    if [ -z "$OAUTH_TOKEN" ]; then
      echo "Please set the OAUTH_TOKEN environment variable in Travis CI with a valid access token which has the 'public_repo' scope."
      exit 1
    fi
  - git push https://$UPSTREAM_USER:$OAUTH_TOKEN@github.com/$UPSTREAM_USER/$REPOSITORY


# After Success
# Note: The standard Unix exit code of "0" means the build passed; everything else is treated as failure.
#after_success:


# After Failure
after_failure:
  - tree -dL 3 ~/  # Print directory structure in the form of a tree.
  - env
  # Dump collected logs
  - LINE=$(printf '%*s' 80 | tr ' ' '-')
  - find ~ -name *.log -exec echo -e "$LINE\nDumping {}\n$LINE" ';' -exec cat {} ';' -exec echo -e "\n" ';'

# After Script
# Test result is exported to TRAVIS_TEST_RESULT.
after_script:
  - pwd
